local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

local DASH_REMOTE_NAME = "Forward Dash Attack"
local UPPERCUT_ANIM_ID = "rbxassetid://10503381238"
local DASH_ANIM_ID = "rbxassetid://10479335397"

local HITBOX_MULT = 3.5
local HITBOX_DURATION = 0.7
local LOCK_OFFSET = Vector3.new(0, 4, 0)
local ORIENT_LERP = 0.18
local DASH_ORIENT_LERP = 0.6
local ANTI_KNOCKBACK_BLEND = 0.6

local lastHitTarget = nil
local manualLock = false
local blockLock = false
local dashLock = false
local isUppercutActive = false
local isDashAnim = false

local currentRoot
local lastRootPos
local originalSizes = {}

local ScreenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
ScreenGui.ResetOnSpawn = false
local StatusBox = Instance.new("Frame", ScreenGui)
StatusBox.Size = UDim2.new(0,20,0,20)
StatusBox.Position = UDim2.new(1,-30,1,-30)
StatusBox.BackgroundColor3 = Color3.fromRGB(255,0,0)

local function updateLockState()
	local enabled = manualLock or blockLock or dashLock
	StatusBox.BackgroundColor3 = enabled and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
	return enabled
end

local function setLastHit(char)
	if char and char:IsA("Model") then
		lastHitTarget = char
	end
end

local function enlargeNearbyTargets(mult, dur)
	for _, pl in pairs(Players:GetPlayers()) do
		if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
			local hrp = pl.Character.HumanoidRootPart
			local dist = (hrp.Position - currentRoot.Position).Magnitude
			if dist <= 25 then
				if not originalSizes[hrp] then
					originalSizes[hrp] = hrp.Size
				end
				hrp.Size = originalSizes[hrp] * mult
			end
		end
	end
	task.delay(dur, function()
		for hrp, size in pairs(originalSizes) do
			if hrp and hrp.Parent then
				pcall(function() hrp.Size = size end)
			end
		end
		originalSizes = {}
	end)
end

local function applyNoKnockback()
	if currentRoot then
		pcall(function()
			currentRoot.CustomPhysicalProperties = PhysicalProperties.new(1e6, 0.3, 0.5)
		end)
	end
end

local function getTargetRoot(target)
	if target and target:FindFirstChild("HumanoidRootPart") then
		return target.HumanoidRootPart
	end
	return nil
end

local function getDashDirectionTo(pos)
	local rootPos = currentRoot.Position
	local d = (pos - rootPos)
	if d.Magnitude == 0 then return Vector3.new(0,0,0) end
	return d.Unit
end

UIS.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		local mouse = LocalPlayer:GetMouse()
		if mouse.Target and mouse.Target.Parent then
			local model = mouse.Target.Parent
			if Players:FindFirstChild(model.Name) then
				setLastHit(model)
			end
		end
	elseif input.KeyCode == Enum.KeyCode.R then
		manualLock = not manualLock
		updateLockState()
	elseif input.KeyCode == Enum.KeyCode.F then
		blockLock = true
		updateLockState()
	end
end)

UIS.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.F then
		blockLock = false
		updateLockState()
	end
end)

local function onDashRemote()
	if not currentRoot then return end
	if lastHitTarget then
		dashLock = true
		updateLockState()
		enlargeNearbyTargets(HITBOX_MULT, HITBOX_DURATION)
		applyNoKnockback()
		task.delay(HITBOX_DURATION + 0.1, function()
			dashLock = false
			updateLockState()
		end)
	end
end

for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
	if obj:IsA("RemoteEvent") and obj.Name == DASH_REMOTE_NAME then
		obj.OnClientEvent:Connect(onDashRemote)
	end
end

local function onAnimPlayed(track)
	local id = ""
	pcall(function() id = track.Animation.AnimationId end)
	if tostring(id) == tostring(UPPERCUT_ANIM_ID) then
		isUppercutActive = true
		track.Stopped:Connect(function() isUppercutActive = false end)
	elseif tostring(id) == tostring(DASH_ANIM_ID) then
		isDashAnim = true
		track.Stopped:Connect(function() isDashAnim = false end)
	end
end

local function hookHumanoid(hum)
	hum.AnimationPlayed:Connect(onAnimPlayed)
end

local function onCharacterAdded(char)
	currentRoot = char:WaitForChild("HumanoidRootPart")
	applyNoKnockback()
	local hum = char:FindFirstChild("Humanoid")
	if hum then hookHumanoid(hum) end
end

if LocalPlayer.Character then onCharacterAdded(LocalPlayer.Character) end
LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

RunService.RenderStepped:Connect(function()
	if not currentRoot then return end
	if lastRootPos then
		local delta = currentRoot.Position - lastRootPos
		if delta.Magnitude > 1 then
			local enabled = updateLockState()
			if enabled then
				currentRoot.CFrame = CFrame.new(lastRootPos:Lerp(currentRoot.Position, ANTI_KNOCKBACK_BLEND))
			end
		end
	end
	lastRootPos = currentRoot.Position

	local enabled = manualLock or blockLock or dashLock
	if enabled and lastHitTarget and lastHitTarget.Parent then
		local targ = getTargetRoot(lastHitTarget)
		if targ then
			if isUppercutActive and (isDashAnim or dashLock) then
				local dir = getDashDirectionTo(targ.Position + LOCK_OFFSET)
				local targetC = CFrame.new(currentRoot.Position, currentRoot.Position + dir)
				currentRoot.CFrame = currentRoot.CFrame:Lerp(targetC, DASH_ORIENT_LERP)
			else
				local dir = getDashDirectionTo(targ.Position + LOCK_OFFSET)
				local targetC = CFrame.new(currentRoot.Position, currentRoot.Position + dir)
				currentRoot.CFrame = currentRoot.CFrame:Lerp(targetC, ORIENT_LERP)
			end
		end
	end
end)
